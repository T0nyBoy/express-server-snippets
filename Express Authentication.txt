{
	
	"Authenticating": {
		"scope": "javascript,typescript",
		"prefix": "expauth",
		"body": [
			"const express = require('express');",
			"const bcrypt = require('bcryptjs');",
			"const jwt = require('jsonwebtoken');",
			"const User = require('../models/users');",
			"const { registerValidation, loginValidation } = require('../validation');",
			"const res = require('express/lib/response');",
			"",
			"const router = express.Router();",
			"",
			"// Authentication Routes",
			"// ---------------------------------------------------------------",
			"// Creating User",
			"router.post('/register', async (req, res) => {",
			"// Validate data before create new user (with Joi)",
			"const { error } = registerValidation(req.body);",
			"if (error) {",
				"return res.send(error.details[0].message);",
			"}",
			"// Check if email exists",
			"const emailExists = await User.findOne({",
				"email: req.body.email,",
			"});",
			"if (emailExists) {",
				"return res.status(400).send({ message: 'Email already exists' });",
			"}",
			"",
			"// HASHING The Password",
			"const salt = await bcrypt.genSalt(10);",
			"const hashPassword = await bcrypt.hash(req.body.password, salt);",
			"",
			"// Create new user",
			"const user = new User({",
				"name: req.body.name,",
				"email: req.body.email,",
				"password: hashPassword,",
			"});",
			"try {",
				"const newUser = await user.save();",
				"res.status(200).send({",
				"message: 'User registered',",
				"data: { name: newUser.name, email: newUser.email },",
				"});",
			"} catch (err) {",
				"res.status(400).send(err);",
			"}",
			"});",
			"",
			"// Login User",
			"router.post('/login', async (req, res) => {",
			"// Validate data before create new user (with Joi)",
			"const { error } = loginValidation(req.body);",
			"if (error) {",
				"return res.send(error.details[0].message);",
			"}",
			"// Check if email exists",
			"const user = await User.findOne({",
				"email: req.body.email,",
			"});",
			"if (!user) {",
				"return res",
				".status(400)",
				".send({ message:'Email or password is not correct' });",
			"}",
			"// Check If PASSWORD IS CORRECT",
			"const validPass = await bcrypt.compare(req.body.password, user.password);",
			"if (!validPass)",
				"return res",
				".status(400)",
				".send({ message: 'Email or password is not correct' });",
			"// else",
			"// Create JWT Token",
			"const token = jwt.sign({ _id: user._id }, process.env.TOKEN_SECRET);",
			"res.header('auth-token', token).send(token);",
			"});",
			"",
			"module.exports = router;",

		],
		"description": "Log output to console"
	}
}