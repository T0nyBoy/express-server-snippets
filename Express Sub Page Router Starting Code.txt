{
	"Express Sub Page Router Creator": {
		"scope": "javascript,typescript",
		"prefix": "expsubpage",
		"body": [
				"const res = require('express/lib/response');",
				"const express = require('express');",
				"const $schema = require('../models/schema');",
				"const $makeItPrivate = require('./$privateRoutesVerifier');",
				"",
				"const router = express.Router();",
				"",
				"// PRIVATE ROUTE",
				"router.get('/', $makeItPrivate, async (req, res) => {",
				"    res.status(200).send('private route');",
				"});",
				"",
				"// sub-routes",
				"// Main Route",
				"// GET all data",
				"router.get('/', async (req, res, next) => {",
				"try {",
				"const data = await $schema.find();",
				"res.status(200).json(data);",
				"} catch (err) {",
				"res.status(500).json({ message: err });",
				"}",
				"});",
				"",
				"// GET one entry",
				"router.get('/:id', async (req, res) => {",
				"try {",
				"const data = await $schema.findById(req.params.id);",
				"res.status(200).json(data);",
				"} catch (err) {",
				"res.status(500).json({ message: err });",
				"}",
				"});",
				"",
				"// Posting Data to the DB",
				"router.post('/', async (req, res) => {",
				"const $dataEntry = new $schema({",
				"$name: req.body.name,",
				"$lastName: req.body.lastName,",
				"});",
				"try {",
				"const data = await $dataEntry.save();",
				"res.status(201).json(data);",
				"data",
				"? res.status(200).json(data)",
				": res.status(404).json({ message: 'No Valid Entry' });",
				"} catch (err) {",
				"res.status(500).json({ message: err });",
				"}",
				"});",

				"// Deleting specific entry",
				"router.delete('/:id', async (req, res) => {",
				"try {",
					"const data = await $schema.deleteOne({ _id: req.params.id });",
					"res.status(200).json(data);",
				"} catch (err) {",
					"res.status(500).json({ message: err });",
				"}",
				"});",
				"",
				"// Updating specific entry",
				"router.patch('/:id', async (req, res) => {",
				"try {",
					"const data = await $schema.updateOne(",
					"{ _id: req.params.id },",
					"{",
						"\\$set: {",
						"$name: req.body.name,",
						"$lastName: req.body.lastName,",
						"updated_at: Date.now(),",
						"},",
					"}",
					");",
					"res.status(200).json(data);",
				"} catch (err) {",
					"res.status(500).json({ message: err });",
				"}",
				"});",
				"",
				"module.exports = router;",

		],
		"description": "Log output to console"
	}
}