{"expcontrollers": {
	"prefix": "expcontrollers",
	"body": [
	  "const mongoose = require(\"mongoose\");",
	  "const listSchema = require(\"../models/Lists\");",
	  "",
	  "const getAllLists = async (req, res) => {",
	  "  try {",
	  "    const data = await listSchema.find().sort({ createdAt: -1 });",
	  "    res.status(200).json(data);",
	  "  } catch (error) {",
	  "    res.status(500).json({ error: error.message });",
	  "  }",
	  "};",
	  "",
	  "const getOneList = async (req, res) => {",
	  "  //   check if id is correct",
	  "  const { id } = req.params;",
	  "  if (!mongoose.Types.ObjectId.isValid(id)) {",
	  "    return res.status(404).json({ error: \"No workout found\" });",
	  "  }",
	  "  try {",
	  "    const data = await listSchema.findById(req.params.id);",
	  "    if (!data) {",
	  "      res.status(404).json({ message: \"No Data Found.\" });",
	  "    } else {",
	  "      res.status(200).json(data);",
	  "    }",
	  "  } catch (error) {",
	  "    res.status(500).json({ error: error.message });",
	  "  }",
	  "};",
	  "",
	  "const createList = async (req, res) => {",
	  "  const dataEntry = new listSchema({",
	  "    listName: req.body.listName,",
	  "  });",
	  "  const { listName } = req.body;",
	  "  try {",
	  "    const data = await listSchema.create({ listName });",
	  "    data",
	  "      ? res.status(200).json(data)",
	  "      : res.status(404).json({ message: \"No Valid Entry\" });",
	  "  } catch (error) {",
	  "    res.status(400).json({ error: error.message });",
	  "  }",
	  "};",
	  "",
	  "const deleteList = async (req, res) => {",
	  "  const { id } = req.params;",
	  "  if (!mongoose.Types.ObjectId.isValid(id)) {",
	  "    return res.status(404).json({ error: \"No data found\" });",
	  "  }",
	  "  try {",
	  "    const data = await listSchema.findOneAndDelete({ _id: req.params.id });",
	  "    if (!data) {",
	  "      return res.status(404).json({ error: \"No data found\" });",
	  "    }",
	  "    return res.status(200).json({ data, message: \"Entry deleted\" });",
	  "  } catch (error) {",
	  "    res.status(500).json({ error: error.message });",
	  "  }",
	  "};",
	  "",
	  "const updateList = async (req, res) => {",
	  "  const { id } = req.params;",
	  "  if (!mongoose.Types.ObjectId.isValid(id)) {",
	  "    return res.status(404).json({ error: \"No data found\" });",
	  "  }",
	  "  try {",
	  "    const data = await listSchema.findByIdAndUpdate(",
	  "      { _id: id, updated_at: Date.now() },",
	  "      { ...req.body }",
	  "    );",
	  "    if (!data) {",
	  "      return res.status(404).json({ error: \"No workout found\" });",
	  "    }",
	  "    res.status(200).json(data);",
	  "  } catch (error) {",
	  "    res.status(500).json({ error: error.message });",
	  "  }",
	  "};",
	  "",
	  "module.exports = {",
	  "  getAllLists,",
	  "  getOneList,",
	  "  createList,",
	  "  deleteList,",
	  "  updateList,",
	  "};",
	  ""
	],
	"description": "Express Controllers"
  }}